;;; 1.25

; Alyssa P. Hacker complains that we went to a lot of extra work in writing
; expmod. After all, she says, since we already know how to compute
; exponentials, we could have simply written
;
;    (define (expmod base exp m)
;      (remainder (fast-expt base exp) m))
;
; Is she correct? Would this procedure serve as well for our fast prime
; tester? Explain.

; TODO

;;; 1.26

; Louis Reasoner is having great difficulty doing exercise 1.24. His
; fast-prime? test seems to run more slowly than his prime? test. Louis
; calls his friend Eva Lu Ator over to help. When they examine Louis's
; code, they find that he has rewritten the expmod procedure to use an
; explicit multiplication, rather than calling square:
;
;    (define (expmod base exp m)
;      (cond ((= exp 0) 1)
;            ((even? exp) (remainder (* (expmod base (/ exp 2) m)
;                                       (expmod base (/ exp 2) m))
;                                    m))
;            (else        (remainder (* base (expmod base (- exp 1) m))
;                                    m))))
;
; "I don't see what difference that could make," says Louis. "I do." says
; Eva. "By writing the procedure like that, you have transformed the
; O(log n) process into a O(n) process." Explain. 

The savings from the even/odd split of the last two cases of the cond
are due to the reduction of expmod calls. By removing the call to square
Louis' code is doing the same number of expmod calls as a naive
solution but additionally has more cases to check in the cond, resulting
in slightly more work being done.

