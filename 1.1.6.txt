;;; 1.1

10
; 10

(+ 5 3 4)
; 12

(- 9 1)
; 8

(/ 6 2)
; 3

(+ (* 2 4) (- 4 6))
; 6

(def a 3)
; #'user/a

(def b (+ a 1))
; #'user/b

(+ a b (* a b))
; 19

(= a b)
; false

(if (and (> b a) (< b (* a b)))
    b
    a)
; 4

(cond (= a 4) 6
      (= b 4) (+ 6 7 a)
      :else 25)
; 16

(+ 2 (if (> b a) b a))
; 6

(* (cond (> a b) a
         (< a b) b
         :else -1)
   (+ a 1))
; 16


;;; 1.2

; Translate the following expression into prefix form
;
; 5 + 4 + (2 - (3 - (6 + 4/5)))
; -----------------------------
;        3(6 - 2)(2 - 7)

(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))


;;; 1.4

; Observe that our model of evaluation allows for combinations whose 
; operators are compound expressions. Use this observation to describe the
; behaviour of the following procedure:
;
; (def a-plus-abs-b [a b]
;   ((if (> b 0) + -) a b))

; (if (> b 0) + -) is a compound expression which returns the name of
; the function to be performed on the arguments.


;;; 1.5

; Ben Bitdiddle has invented a test to determine whether the interpreter
; he is faced with is using applicative-order evaluation or normal-order
; evaluation. He defines the following two procedures:
;
; (defn p [] (p))
;
; (defn test [x y] (if (= x 0) 0 y))
;
; Then he evaluations the expression
;
; (test 0 (p))
;
; What behaviour will Ben observe with an interpreter that uses applicative-
; order evaluation? What behaviour will he observe with an interpreter that
; uses normal-order evaluation?  Explain your answer. (Assume that the
; evaluation rule for the special form `if` is the same whether the
; interpreter is using normal or applicative order: The predicate expression
; is evaluated first, and the result determines whether to evaluate the
; consequent or the alternative expression.)

Normal order will translate (test 0 (p)) as so:

    (if (= 0 0) 0 (p)))

The test will return true, so will return 0.

An applicative order translation will instead translate the
call to p first, which will just become itself:

    (test 0 (p))

Then, there's an unbound p again, so we translate it again,
and have an infinite loop in parsing the call.
