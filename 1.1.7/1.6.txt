; Alyssa P. Hacker doesn't see why if needs to be provided as a special
; form. "Why can't I just define it as an ordinary procedure in terms of
; cond?" she asks. Alyssa's friend Eva Lu Ator claims this can indeed be
; done, and she defines a new version of if:
;
; (defn new-if [predicate then-clause else-clause]
;   (cond predicate then-clause
;         :else else-clause))
;
; Eva demonstrates the program for Alyssa:
;
; (new-if (= 2 3) 0 5)
; 5
; (new-if (= 1 1) 0 5)
; 0
;
; Delighted, Alyssa uses new-if to rewrite the square-root program:
;
; (define (sqrt-iter guess x) 
;   (new-if (good-enough? guess x) 
;           guess 
;           (sqrt-iter (improve guess x) 
;                      x)))
;
; What happens when Alyssa attempts to use this to compute square roots?
; Explain.

Because Clojure uses applicative substitution, all the parameters
to my-if are evaluated before the function is called, causing infinite
recursion on sqrt-iter while resolving the arguments.

The built-in if is a special form so that it can be defined lazily.
