;;; 1.9

; Each of the following two procedures defines a method for adding two
; positive integers in terms of the procedures inc, which increments its
; argument by 1, and dec, which decrements its argument by 1.
;
;    (define (+ a b)
;      (if (= a 0)
;          b
;          (inc (+ (dec a) b))))
;
;    (define (+ a b)
;      (if (= a 0)
;          b
;          (+ (dec a) (inc b))))
;
; Using the substitution model, illustrate the process generated by each
; procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

; first is a recursive process
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9

; second is an iterative process
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9


;;; 1.10

; The following procedure computes a mathematical function called Ackermann's
; function.
;
;    (defn A [x y]
;      (cond (= y 0) 0
;            (= x 0) (* 2 y)
;            (= y 1) 2
;            :else (A (- x 1)
;                     (A x (- y 1)))))
;
; What are the values of the following expressions?
;
; (A 1 10)
; (A 2 4)
; (A 3 3)
;
; Consider the following procedures, where A is the procedure defined above:
;
; (defn f [n] (A 0 n))
; (defn g [n] (A 1 n))
; (defn h [n] (A 2 n))
; (defn k [n] (* 5 n n))
;
; Give concise mathematical definitions for the functions computed by the
; procedures f, g, and h for positive integer values of n.
; For example, (k n) computes 5n^2.

; A(1, 10) = 1024
; A(2, 4) = 65536
; A(3, 3) = 65536

; f(x) = 2x
; g(x) = 2^x
; h(x) = TODO


;;; M 1.9

; Is the process generated by the sqrt procedure of section 1.1.7 iterative
; or recursive? Use the substitution model to illustrate the first few steps
; in the evaluation of (sqrt 2).

;    (defn improve [guess x]
;      (average guess (/ x guess)))
;    (defn good-enough? [guess x]
;      (< (abs (- (square guess) x)) 0.001))
;    (defn sqrt-iter [guess x]
;      (if (good-enough? guess x)
;          guess
;          (recur (improve guess x)
;                 x)))
;    (defn sqrt [x]
;      (sqrt-iter 1.0 x))

(sqrt 2)
(sqrt-iter 1.0 2)
(sqrt-iter (improve 1.0 2) 2)
(sqrt-iter 1.5 2)
(sqrt-iter (improve 1.5 2) 2)
(sqrt-iter (average 1.5 (/ 2 1.5)) 2)
(sqrt-iter (average 1.5 1.3333333) 2)
(sqrt-iter 1.416666665 2)

; It is an iterative process, maintaining full state with each sqrt-iter call.